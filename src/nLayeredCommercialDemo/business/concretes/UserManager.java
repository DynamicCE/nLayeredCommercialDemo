package nLayeredCommercialDemo.business.concretes;

import nLayeredCommercialDemo.business.abstracts.UserService;
import nLayeredCommercialDemo.dataAccess.abstracts.UserDao;
import nLayeredCommercialDemo.dataAccess.concretes.HibarnateUserDao;
import nLayeredCommercialDemo.entities.concretes.User;

import java.util.regex.Matcher;
import java.util.regex.Pattern;


public
class UserManager implements UserService {

    // dependency injection iÃ§in
    // 1- interface'i tanÄ±mla
    // 2- constructor oluÅŸtur
    private UserDao userDao;

    public
    UserManager ( UserDao userDao ) {
        this.userDao = userDao;
    }

    @Override
    public
    void register ( String password, String nick, String email ) {
        if (password == null || password.isEmpty ( ) || nick == null || nick.isEmpty ( ) || email == null || email.isEmpty ( )) {
            System.out.println ( "KullanÄ±cÄ± bilgilerinden birisi yanlÄ±ÅŸ ama hangisi sÃ¶ylemem ğŸ™ˆ " );
            return;
            // null olan deÄŸiÅŸken Ã¼zerinde isEmpty() Ã§aÄŸrÄ±lÄ±rsa NullPointerException hatasÄ±na neden olur.Ã–nce null kontrol edilmeli
        }
        if (!validateEmail ( email )) {
            System.out.println ( "LÃ¼tfen geÃ§erli bir e-posta giriniz." );
            return;
        }
        if (!validatePassword ( password )) {
            System.out.println ( "LÃ¼tfen geÃ§erli bi e-posta giriniz" );
            return;
        }
        if (!validateNick ( nick )) {
            System.out.println ( "nickiniz en az 2 karakterden oluÅŸmalÄ±dÄ±r :(" );
            return;
        }
        if (checkMail ( email )) {
            System.out.println ( "Bu email ile zaten kayÄ±tlÄ±sÄ±nÄ±z." );
            return;
        }

        sendVerificationMail ( email );
    }

    @Override
    public
    boolean validateEmail ( String email ) {
        String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$";

        Pattern pattern = Pattern.compile ( emailPattern );

        Matcher matcher = pattern.matcher ( email );

//        if (email == null || !matcher.matches ( )) {
//            System.out.println ( "LÃ¼tfen geÃ§erli bir e-posta giriniz." );
//        }

        return !(email == null || !matcher.matches ( ));
    }


    @Override
    public
    boolean validatePassword ( String password ) {
//        if (password.length ( ) < 6) {
//            System.out.println ( "ÅŸifre en az 6 karakterden oluÅŸmalÄ±dÄ±r " );
//        } register'da kullanabilmem iÃ§in void olmamalarÄ± lazÄ±m, deÄŸiÅŸtiriyorum
        return password.length ( ) >= 6;
    }

    @Override
    public
    boolean validateNick ( String nick ) {
//        if (nick.length ( ) < 2) {
//            System.out.println ( "nickiniz en az 2 karakterden oluÅŸmalÄ±dÄ±r :(" );
//        }

        return nick.length ( ) > 2;
    }

    public
    boolean checkMail ( String email ) {
//        if (!userDao.isMailExist ( email )) {
//            System.out.println ( "Bu email ile zaten kayÄ±tlÄ±sÄ±nÄ±z." );
//        }
        return userDao.isMailExist ( email );
    }

    public
    void sendVerificationMail ( String email ) {
        System.out.println ( email + " adresine doÄŸrulama e-postasÄ± gÃ¶nderildi." );
        // doÄŸrulama maili gÃ¶nderecek kod

    }

}
/*  Regex KullanÄ±mÄ±
 *   bir pattern alÄ±rÄ±z ya da yazarÄ±z (pattern istediÄŸimiz formatÄ± belirtir.)
 *   Pattern tÃ¼rÃ¼nde deÄŸiÅŸken oluÅŸtururuz ve buna Pattern.compile(patternimiz) 'i atarÄ±z
 *   Matcher nesnesi de oluÅŸturup buna da pattern nesnesinin .matcher(patternimiz) metodunu atarÄ±z
 *   matcher.matches() ile de kontrol edilir
 * */